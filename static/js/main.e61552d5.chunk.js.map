{"version":3,"sources":["helpers/request.ts","helpers/mapsApi.ts","helpers/localStorage.ts","helpers/weatherApi.ts","helpers/getCityId.ts","data/weatherStore.ts","data/WeatherContext.tsx","components/SearchInput/SearchInput.tsx","helpers/hooks/useAddCity.ts","helpers/hooks/useSavedCities.ts","helpers/hooks/useEventListener.ts","components/RelativeDate/RelativeDate.tsx","helpers/formatDate.ts","components/WeatherBlock/WeatherBlock.tsx","helpers/hooks/useWeatherData.ts","helpers/hooks/useWeatherDetails.ts","helpers/hooks/useRemoveCity.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["get","url","a","options","fetch","response","ok","json","console","log","fetchCitiesSuggest","city","buildUrl","path","queryParams","language","types","access_token","String","process","features","setItem","key","value","window","localStorage","JSON","stringify","dispatchEvent","Event","getItem","parse","e","getWeatherByCity","lat","lon","appid","units","getCityId","createWeatherStore","weather","loadWeather","loading","cityWeather","updated","Date","now","data","loadAll","cities","Promise","all","map","getMinCityTemperatureId","minTemperature","Infinity","weatherId","undefined","Object","entries","this","forEach","id","main","temp","getMaxCityTemperatureId","maxTemperature","StoreContext","React","createContext","StoreProvider","children","store","useLocalStore","Provider","useStore","useContext","Error","getSuggestionValue","suggestion","text","renderSuggestion","place_name","SearchInput","suggestions","setSuggestions","setValue","currentValueRef","addCity","useCallback","cityCoordinates","find","coordinate","join","push","loadSuggestions","suggestValue","current","updateValue","onChange","target","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSelectSuggestion","_","center","inputProps","placeholder","onSuggestionSelected","highlightFirstSuggestion","useSavedCities","useState","setCities","event","callback","deps","listener","useEffect","addEventListener","removeEventListener","useEventListener","RelativeDate","className","timestamp","seconds","setSeconds","timer","setInterval","clearInterval","date","diff","sec","Math","floor","min","dateObject","dateData","getDate","getMonth","getFullYear","getHours","getMinutes","component","slice","formatDate","WeatherBlock","observer","max","weatherData","useWeatherData","details","wind","name","icon","description","useWeatherDetails","removeCity","updatedCities","filter","onRemove","isLoading","classNames","weather__min","weather__max","onClick","src","alt","style","transform","deg","speed","pressure","humidity","App","minCityId","maxCityId","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e61552d5.chunk.js","sourcesContent":["export async function get(url: string, options: RequestInit = {}) {\n    try {\n        let response = await fetch(url, options);\n\n        if (response.ok) {\n            return response.json();\n        }\n\n        throw response;\n    } catch (err) {\n        console.log(err);\n\n        throw err;\n    }\n}\n\nexport function post(url: string, data: Dict, options: RequestInit = {}) {\n    let {headers, ...params} = options;\n\n    return get(url, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(data),\n        ...params,\n    });\n}\n","import {get} from './request';\nimport buildUrl from 'build-url';\n\nexport interface CitySuggestItem {\n    id: string;\n    place_name: string;\n    text: string;\n    center: [number, number]\n}\n\nexport async function fetchCitiesSuggest(city: string): Promise<CitySuggestItem[]> {\n    let response = await get(\n        buildUrl('https://api.mapbox.com/', {\n            path: `geocoding/v5/mapbox.places/${city}.json`,\n            queryParams: {\n                language: 'en_US',\n                types: 'place',\n                access_token: String(process.env.REACT_APP_MAP_API_KEY),\n            },\n        })\n    );\n\n    return response.features || [];\n}\n","export function setItem(key: string, value: string) {\n    if (window.localStorage) {\n        if (typeof value === 'object') {\n            value = JSON.stringify(value);\n        }\n        window.localStorage.setItem(key, value);\n        window.dispatchEvent(new Event('storage-change'));\n    }\n}\n\nexport function getItem(key: string) {\n    if (window.localStorage) {\n        let value = window.localStorage.getItem(key);\n\n        if (!value) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(value);\n        } catch (e) {\n            return value;\n        }\n    }\n}\n\nexport function removeItem(key: string) {\n    if (window.localStorage) {\n        window.localStorage.removeItem(key);\n        window.dispatchEvent(new Event('storage-change'));\n    }\n}\n\nexport const CITIES_STORAGE_KEY = 'cities';\n","import {get} from \"./request\";\nimport buildUrl from \"build-url\";\nimport {CityCoordinates} from \"./hooks/useSavedCities\";\n\nexport interface WeatherResponseData {\n    \"coord\": {\n        \"lon\":number,\n        \"lat\": number,\n    },\n    \"weather\": {\n        \"id\": number,\n        \"main\": string,\n        \"description\": string,\n        \"icon\": string,\n    }[],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": number,\n        \"feels_like\": number,\n        \"temp_min\": number,\n        \"temp_max\": number,\n        \"pressure\": number,\n        \"humidity\": number,\n    },\n    \"visibility\": 10000,\n    \"wind\": {\n        \"speed\": number,\n        \"deg\": number,\n    },\n    \"clouds\": {\"all\": 90},\n    \"dt\": 1601274045,\n    \"sys\": {\"type\": 1, \"id\": 6554, \"country\": \"FR\", \"sunrise\": 1601273602, \"sunset\": 1601316212},\n    \"timezone\": 7200,\n    \"id\": 6448047,\n    \"name\": \"Brest\",\n    \"cod\": 200\n}\n\nexport async function getWeatherByCity(city: CityCoordinates): Promise<WeatherResponseData | null> {\n    try {\n        let response = await get(\n            buildUrl('https://api.openweathermap.org', {\n                path: '/data/2.5/weather',\n                queryParams: {\n                    lat: String(city[1]),\n                    lon: String(city[0]),\n                    appid: String(process.env.REACT_APP_WEATHER_API_KEY),\n                    units: 'metric',\n                },\n            })\n        );\n\n        return response;\n    } catch (e) {\n        return null;\n    }\n}\n\nexport async function getWeather(cities: string[]): Promise<WeatherResponseData | null> {\n    try {\n        let response = await get(\n            buildUrl('https://api.openweathermap.org', {\n                path: 'data/2.5/group',\n                queryParams: {\n                    id: cities.join(','),\n                    appid: String(process.env.REACT_APP_WEATHER_API_KEY),\n                    units: 'metric',\n                },\n            })\n        );\n\n        return response;\n    } catch (e) {\n        return null;\n    }\n}\n\n","import {CityCoordinates} from \"./hooks/useSavedCities\";\n\nexport function getCityId(city: CityCoordinates) {\n    return `${city[0]};${city[1]}`\n}\n","import {CityCoordinates} from \"../helpers/hooks/useSavedCities\";\nimport {getWeatherByCity, WeatherResponseData} from \"../helpers/weatherApi\";\nimport {getCityId} from \"../helpers/getCityId\";\n\nexport type WeatherData = {\n    updated?: number\n    data?: WeatherResponseData,\n    city?: CityCoordinates,\n    loading: boolean;\n}\n\nexport function createWeatherStore() {\n    return {\n        weather: {} as Record<string, WeatherData>,\n        async loadWeather(city: CityCoordinates) {\n            if (!this.weather[getCityId(city)]) {\n                this.weather[getCityId(city)] = {\n                    loading: true,\n                };\n            } else {\n                this.weather[getCityId(city)].loading = true;\n            }\n\n            let cityWeather = await getWeatherByCity(city);\n\n            if (!cityWeather) {\n                return;\n            }\n\n            this.weather[getCityId(city)] = {\n                updated: Date.now(),\n                data: cityWeather,\n                city,\n                loading: false,\n            }\n        },\n\n        async loadAll(cities: CityCoordinates[]) {\n            return Promise.all(cities.map((city) => this.loadWeather(city)));\n        },\n\n        getMinCityTemperatureId() {\n            let minTemperature = Infinity;\n            let weatherId = undefined;\n            Object.entries(this.weather).forEach(([id, value]) => {\n                if (value.data && value.data.main) {\n                    if (minTemperature > value.data.main.temp) {\n                        minTemperature = value.data.main.temp;\n                        weatherId = id;\n                    }\n                }\n            });\n\n            return weatherId;\n        },\n        getMaxCityTemperatureId() {\n            let maxTemperature = -Infinity;\n            let weatherId = undefined;\n            Object.entries(this.weather).forEach(([id, value]) => {\n                if (value.data && value.data.main) {\n                    if (maxTemperature < value.data.main.temp) {\n                        maxTemperature = value.data.main.temp;\n                        weatherId = id;\n                    }\n                }\n            });\n\n            return weatherId;\n        }\n\n    }\n}\n\nexport type WeatherStore = ReturnType<typeof createWeatherStore>\n","import {createWeatherStore, WeatherStore} from './weatherStore'\nimport {useLocalStore} from 'mobx-react-lite'\nimport React from \"react\";\n\nconst StoreContext = React.createContext<WeatherStore | null>(null)\n\nexport const StoreProvider: React.FC = ({children}) => {\n    const store = useLocalStore(createWeatherStore);\n    return (\n        <StoreContext.Provider\n            value={store}\n        >\n            {children}\n        </StoreContext.Provider>\n    );\n}\n\nexport const useStore = () => {\n    const store = React.useContext(StoreContext);\n    if (!store) {\n        // this is especially useful in TypeScript so you don't need to be checking for null all the time\n        throw new Error('useStore must be used within a StoreProvider.')\n    }\n    return store;\n}\n","import * as React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport {CitySuggestItem, fetchCitiesSuggest} from \"../../helpers/mapsApi\";\nimport {ChangeEvent} from \"react\";\nimport \"./SearchInput.css\";\nimport {useSavedCities} from \"../../helpers/hooks/useSavedCities\";\nimport {useAddCity} from \"../../helpers/hooks/useAddCity\";\nimport {useStore} from \"../../data/WeatherContext\";\n\nexport interface SearchInputProps {\n\n}\n\nfunction getSuggestionValue(suggestion: CitySuggestItem) {\n    return suggestion.text;\n}\n\nfunction renderSuggestion(suggestion: CitySuggestItem) {\n    return (\n        <span>{suggestion.place_name}</span>\n    );\n}\n\nexport const SearchInput: React.FC<SearchInputProps> = ({}) => {\n    let [suggestions, setSuggestions] = React.useState<CitySuggestItem[]>([]);\n    let [value, setValue] = React.useState('');\n    let currentValueRef = React.useRef('');\n    let addCity = useAddCity();\n    let store = useStore();\n\n    let loadSuggestions = React.useCallback(async (suggestValue) => {\n        let cities = await fetchCitiesSuggest(suggestValue);\n\n        if (currentValueRef.current === suggestValue) {\n            setSuggestions(cities);\n        }\n    }, [value]);\n\n    let updateValue = React.useCallback((value: string) => {\n        setValue(value);\n        currentValueRef.current = value;\n    }, [setValue])\n\n    let onChange = React.useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        updateValue(e.target.value);\n    }, [setValue]);\n\n    let onSuggestionsFetchRequested = React.useCallback(({value}) => {\n        loadSuggestions(value);\n    }, [loadSuggestions]);\n\n    let onSuggestionsClearRequested = React.useCallback(() => {\n        setSuggestions([]);\n    }, [setSuggestions])\n\n    let onSelectSuggestion = React.useCallback((_, {suggestion}: {suggestion: CitySuggestItem}) => {\n        updateValue('');\n        addCity(suggestion.center);\n        store.loadWeather(suggestion.center)\n    }, [updateValue, addCity, store]);\n\n    let inputProps = {\n        placeholder: \"Enter city\",\n        value,\n        onChange,\n    };\n\n    return (\n        <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            onSuggestionSelected={onSelectSuggestion}\n            highlightFirstSuggestion\n            inputProps={inputProps}\n        />\n    );\n}\n","import {CITIES_STORAGE_KEY, getItem, setItem} from \"../localStorage\";\nimport {CityCoordinates} from \"./useSavedCities\";\nimport React from \"react\";\n\nexport function useAddCity() {\n    return React.useCallback((cityCoordinates: CityCoordinates) => {\n        let cities = getItem(CITIES_STORAGE_KEY) || [];\n        if (cities.find((coordinate: CityCoordinates) => coordinate.join(';') === cityCoordinates.join(';'))) {\n            return cities;\n        }\n\n        cities.push(cityCoordinates);\n        setItem(CITIES_STORAGE_KEY, cities);\n\n        return cities;\n    }, []);\n}\n","import React from \"react\";\nimport {CITIES_STORAGE_KEY, getItem} from \"../localStorage\";\nimport {useEventListener} from \"./useEventListener\";\n\nexport type CityCoordinates = [number, number];\n\nexport function useSavedCities(): CityCoordinates[] {\n    let [cities, setCities] = React.useState(getItem(CITIES_STORAGE_KEY) || []);\n\n    useEventListener(window, 'storage-change', () => {\n        setCities(getItem(CITIES_STORAGE_KEY));\n    }, []);\n\n    return cities;\n}\n","import React from \"react\";\n\nexport function useEventListener(\n    target: EventTarget | null,\n    event: string,\n    callback: EventListener,\n    deps: any[],\n    options?: boolean | AddEventListenerOptions\n) {\n    let listener = React.useCallback(callback, deps);\n\n    React.useEffect(() => {\n        if (!target) {\n            return;\n        }\n\n        target.addEventListener(event, listener, options);\n\n        return () => {\n            target.removeEventListener(event, listener, options);\n        };\n    }, [target, event, listener, options]);\n}\n","import * as React from 'react';\nimport {formatDate} from \"../../helpers/formatDate\";\n\nexport interface RelativeDateProps {\n    className?: string;\n    timestamp: number;\n}\n\nexport const RelativeDate: React.FC<RelativeDateProps> = ({className, timestamp}) => {\n    const [seconds, setSeconds] = React.useState(1);\n\n    React.useEffect(() => {\n        const timer = setInterval(() => {\n            setSeconds(seconds + 1);\n        }, 10000);\n\n        return () => clearInterval(timer);\n    });\n\n    return (\n        <span className={className}>\n            {formatDate(timestamp)}\n        </span>\n    );\n}\n","export function formatDate(date: number) {\n    let diff = Date.now() - date;\n\n    if (diff < 1000) {\n        return 'right now';\n    }\n\n    let sec = Math.floor(diff / 1000);\n\n    if (sec < 60) {\n        return sec + ' sec. ago';\n    }\n\n    let min = Math.floor(diff / 60000);\n    if (min < 60) {\n        return min + ' min. ago';\n    }\n\n    let dateObject = new Date(date);\n    let dateData = [\n        '0' + dateObject.getDate(),\n        '0' + (dateObject.getMonth() + 1),\n        '' + dateObject.getFullYear(),\n        '0' + dateObject.getHours(),\n        '0' + dateObject.getMinutes()\n    ].map(component => component.slice(-2));\n\n    return dateData.slice(0, 3).join('.') + ' ' + dateData.slice(3).join(':');\n}\n","import * as React from 'react';\nimport {observer} from 'mobx-react-lite';\nimport {useWeatherData} from '../../helpers/hooks/useWeatherData';\nimport {CityCoordinates} from '../../helpers/hooks/useSavedCities';\nimport {useWeatherDetails} from '../../helpers/hooks/useWeatherDetails';\nimport './WeatherBlock.css';\nimport {useRemoveCity} from '../../helpers/hooks/useRemoveCity';\nimport {RelativeDate} from '../RelativeDate/RelativeDate';\nimport classNames from 'classnames';\n\nexport interface WeatherBlockProps {\n    city: CityCoordinates;\n    className?: string;\n    min: boolean;\n    max: boolean;\n}\n\nexport const WeatherBlock: React.FC<WeatherBlockProps> = observer(\n    ({className, city, min, max}) => {\n        const weatherData = useWeatherData(city);\n        const details = useWeatherDetails(weatherData);\n        const removeCity = useRemoveCity();\n\n        const onRemove = React.useCallback(() => {\n            removeCity(city);\n        }, [removeCity, city]);\n\n        const isLoading = weatherData && weatherData.loading;\n        console.log({...weatherData});\n        return (\n            <div\n                className={classNames('weather', className, {\n                    weather__min: min,\n                    weather__max: max,\n                })}\n            >\n                <button className=\"weather__remove\" onClick={onRemove} />\n                <div className=\"weather__title\">\n                    {details.icon && (\n                        <img\n                            className=\"weather__icon\"\n                            src={`http://openweathermap.org/img/wn/${details.icon}@2x.png`}\n                            alt={details.description}\n                        />\n                    )}\n                    {\n                        <h2>\n                            {details.name} {details.main && details.main.temp}{' '}\n                            {isLoading && <span className=\"weather__spin\" />}\n                        </h2>\n                    }\n                </div>\n                <div className=\"weather__description\">\n                    {details.wind && (\n                        <div className=\"weather__data\">\n                            <div\n                                style={{\n                                    transform: `rotate(${details.wind.deg}deg)`,\n                                }}\n                                className=\"weather__arrow\"\n                            />\n\n                            <span>{details.wind.speed} m/s</span>\n                            {details.main && (\n                                <>\n                                    &nbsp;|&nbsp;\n                                    <span>{details.main.pressure} hPa</span>\n                                    &nbsp;|&nbsp;\n                                    <span>{details.main.humidity}%</span>\n                                </>\n                            )}\n                        </div>\n                    )}\n                    {details.updated && (\n                        <RelativeDate\n                            timestamp={details.updated}\n                            className=\"weather__updated\"\n                        />\n                    )}\n                </div>\n            </div>\n        );\n    }\n);\n","import {CityCoordinates} from \"./useSavedCities\";\nimport {useStore} from \"../../data/WeatherContext\";\nimport {getCityId} from \"../getCityId\";\nimport {WeatherData} from \"../../data/weatherStore\";\n\nexport function useWeatherData(city: CityCoordinates): Optional<WeatherData> {\n    let store = useStore();\n\n    return store.weather[getCityId(city)];\n}\n","import {WeatherData} from \"../../data/weatherStore\";\n\nexport interface WeatherDetails {\n    name?: string;\n    icon?: string;\n    description?: string;\n    wind?: {\n        speed: number;\n        deg: number;\n    };\n    main?: {\n        temp: number,\n        pressure: number,\n        humidity: number,\n    };\n    updated?: number;\n}\n\nexport function useWeatherDetails(weatherData: Optional<WeatherData>): WeatherDetails {\n    let details: WeatherDetails = {};\n\n    if (!weatherData) {\n        return details;\n    }\n\n    if (weatherData.data) {\n        let {wind, main, weather, name} = weatherData.data;\n        details.wind = wind;\n        details.main = main;\n        details.name = name;\n        details.updated = weatherData.updated;\n        if (weather[0]) {\n            details.icon = weather[0].icon;\n            details.description = weather[0].icon;\n        }\n    }\n\n    return details;\n}\n","import React from \"react\";\nimport {CITIES_STORAGE_KEY, getItem, setItem} from \"../localStorage\";\nimport {CityCoordinates} from \"./useSavedCities\";\n\nexport function useRemoveCity() {\n    return React.useCallback((cityCoordinates: CityCoordinates) => {\n\n        let cities = getItem(CITIES_STORAGE_KEY) || [];\n\n        let updatedCities = cities.filter((coordinate: CityCoordinates) => coordinate.join(';') !== cityCoordinates.join(';'));\n        setItem(CITIES_STORAGE_KEY, updatedCities);\n\n        return updatedCities;\n    }, []);\n}\n","import React from 'react';\nimport './App.css';\nimport { SearchInput } from './components/SearchInput/SearchInput';\nimport { useSavedCities } from './helpers/hooks/useSavedCities';\nimport { WeatherBlock } from './components/WeatherBlock/WeatherBlock';\nimport { useStore } from './data/WeatherContext';\nimport { observer } from 'mobx-react-lite';\nimport { getCityId } from './helpers/getCityId';\n\nconst UPDATE_INTERVAL = 5 * 60 * 1000;\n\nconst App: React.FC = observer(() => {\n  const cities = useSavedCities();\n  const store = useStore();\n\n  React.useEffect(() => {\n    store.loadAll(cities);\n  }, []);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      store.loadAll(cities);\n    }, UPDATE_INTERVAL);\n\n    return () => clearInterval(timer);\n  }, [cities]);\n\n  const minCityId = store.getMinCityTemperatureId();\n  const maxCityId = store.getMaxCityTemperatureId();\n\n  return (\n    <div>\n      <header>\n        <SearchInput />\n      </header>\n      <main>\n        {cities.map((city) => {\n          return (\n            <WeatherBlock\n              className=\"block\"\n              min={getCityId(city) === minCityId}\n              max={getCityId(city) === maxCityId}\n              key={city[0] + city[1]}\n              city={city}\n            />\n          );\n        })}\n      </main>\n    </div>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StoreProvider} from \"./data/WeatherContext\";\n\nReactDOM.render(\n    <StoreProvider>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}